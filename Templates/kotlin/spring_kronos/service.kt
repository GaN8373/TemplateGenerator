<#assign PascalTableName=NameUtil.toPascalCase(table.getRawName())>
<#assign SnakeTableName=NameUtil.toSnakeCase(table.getRawName())>
<#assign CamelTableName=NameUtil.toCamelCase(table.getRawName())>
<#assign DbStructData=table.getParent()>

#region config
fileName=${PascalTableName}Service.kt
dir=service
#endregion

package ${namespace}.services

import org.springframework.stereotype.Service
import com.kotoframework.definition.desc
import com.kotoframework.function.columnSearch.columnSearch
import com.kotoframework.beans.KotoExecuteResult
import com.kotoframework.function.create.Patch.execute
import com.leinbo.eqm.dto.thirdPhase.WeldingProcessGeneralDto
import com.kotoframework.function.create.create
import com.kotoframework.function.remove.remove
import com.kotoframework.function.select.select
import com.kotoframework.function.update.update
import com.kotoframework.interfaces.Patch.execute

/**
 * ${table.getRawComment()}
 * @author
 * @date ${.now?string('yyyy-MM-dd HH:mm:ss')}
 * @description  Service for ${CamelTableName}, generated by Kotoframework code generator
 */

@Service
class ${PascalTableName}Service {
    fun create${PascalTableName}(${CamelTableName}: ${PascalTableName}): KotoExecuteResult {
        return create(${CamelTableName}).onId().execute()
    }

    fun remove${PascalTableName}(id: Int): KotoExecuteResult {
        return remove(${PascalTableName}(id)).soft().byId().execute()
    }

    fun update${PascalTableName}(${CamelTableName}: ${PascalTableName}): KotoExecuteResult {
        return update(${CamelTableName}).byId().execute()
    }

    fun get${PascalTableName}(id: Int): ${PascalTableName} {
        return select(${PascalTableName}(id)).by("id").queryForObject()
    }

    fun query${PascalTableName}List(${CamelTableName}: ${PascalTableName}, pageIndex: Int, pageSize: Int): Pair<List<Map<String, Any>>, Int> {
        return select(${CamelTableName}).where().page(pageIndex, pageSize).orderBy(${CamelTableName}::updateTime.desc()).withTotal{ it.query() }
    }

    fun getNameList(name: String? = null): List<String> {
        return columnSearch(${PascalTableName}::name to name).queryForList()
    }

    fun getEmailList(email: String? = null): List<String> {
        return columnSearch(${PascalTableName}::email to email).queryForList()
    }

}
