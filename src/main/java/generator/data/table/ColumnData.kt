package generator.data.table

import com.intellij.database.model.*
import generator.data.TypeMapper
import generator.interfaces.IRawDas
import generator.util.DasUtil
import generator.util.TemplateUtil

@Suppress("unused")
class ColumnData(private val rawDas: DasColumn, private val typeMappers: Collection<TypeMapper>) : IRawDas<DasColumn> {


    override fun getRawDas(): DasColumn {
        return rawDas
    }

    fun getMapperType(): String {
        return TemplateUtil.convertType(rawDas, typeMappers) ?: "unknown"
    }

    fun getRawType(): String {
        return DasUtil.getDataType(rawDas)
    }



    fun hasPrimaryKey(): Boolean {
        return DasUtil.hasAttribute(getRawDas(), DasColumn.Attribute.PRIMARY_KEY)
    }

    fun hasForeignKey(): Boolean {
        return DasUtil.hasAttribute(getRawDas(), DasColumn.Attribute.FOREIGN_KEY)
    }


    fun hasIndex(): Boolean {
        return DasUtil.hasAttribute(getRawDas(), DasColumn.Attribute.INDEX)
    }

    private lateinit var dasIndex: List<DasIndex>
    fun hasUnique(): Boolean {
        val isUnique = dasIndex.map { it.isUnique }.first { it }
        return isUnique
    }


    fun hasAutoGenerated(): Boolean {
        return DasUtil.hasAttribute(getRawDas(), DasColumn.Attribute.AUTO_GENERATED)
    }

    init {
        run {
            val dasParent = getRawDas().dasParent as DasTable
            val toList = dasParent.getDasChildren(ObjectKind.INDEX).map { it as DasIndex }
                .filter { it.columnsRef.names().contains(getRawDas().name) }
                .toList()
            this.dasIndex = toList
        }
    }


}
